unnest(data)
pheno_to_model_example
pheno_dat_use %>%
filter(trait %in% c(.x, .y)) %>%
# Filter trials where both traits were observed
group_by(trial) %>%
filter(n_distinct(trait) == n_distinct(c(.x, .y))) %>%
spread(trait, value) %>%
group_by(nursery, management) %>%
nest()
pheno_to_model_example <- trait_pairs %>%
mutate(data = map2(trait1, trait2, ~{
pheno_dat_use %>%
filter(trait %in% c(.x, .y)) %>%
# Filter trials where both traits were observed
group_by(trial) %>%
filter(n_distinct(trait) == n_distinct(c(.x, .y))) %>%
spread(trait, value) %>%
group_by(nursery, management) %>%
nest()
})) %>%
unnest(data)
read.csv(file = file.path(data_dir, "nursery_phenotype_data_use.csv"), stringsAsFactors = FALSE) %>%
as_tibble() %>%
# Copy year
mutate(year1 = year) %>%
mutate_at(vars(trial, location, year, environment, line_name), as.factor) %>%
# Tidy
gather(trait, value, matches("[A-Z]", ignore.case = FALSE)) %>%
filter(!is.na(value))
# Phenotype
pheno_dat <- read.csv(file = file.path(data_dir, "nursery_phenotype_data_use.csv"), stringsAsFactors = FALSE) %>%
as_tibble() %>%
# Copy year
mutate(year1 = year) %>%
mutate_at(vars(trial, location, year, environment, line_name), as.factor) %>%
# Tidy
gather(trait, value, matches("[A-Z]", ignore.case = FALSE)) %>%
filter(!is.na(value)) %>%
# Calculate line means for all trait/trial combos
group_by_at(vars(-value))
pheno_dat
# Phenotype
pheno_dat <- read.csv(file = file.path(data_dir, "nursery_phenotype_data_use.csv"), stringsAsFactors = FALSE) %>%
as_tibble() %>%
# Copy year
mutate(year1 = year) %>%
mutate_at(vars(trial, location, year, environment, line_name), as.factor) %>%
# Tidy
gather(trait, value, matches("[A-Z]", ignore.case = FALSE)) %>%
filter(!is.na(value)) %>%
# Calculate line means for all trait/trial combos
group_by_at(vars(-value)) %>%
summarize(value = mean(value))
pheno_dat
# Phenotype
pheno_dat <- read.csv(file = file.path(data_dir, "nursery_phenotype_data_use.csv"), stringsAsFactors = FALSE) %>%
as_tibble() %>%
# Copy year
mutate(year1 = year) %>%
mutate_at(vars(trial, location, year, environment, line_name), as.factor) %>%
# Tidy
gather(trait, value, matches("[A-Z]", ignore.case = FALSE)) %>%
filter(!is.na(value)) %>%
# Calculate line means for all trait/trial combos
group_by_at(vars(-value)) %>%
summarize(value = mean(value)) %>%
ungroup()
## Extract phenotypic data for these traits
## Find trials where at least one trait was observed; then find
## trials where both traits were observed
trait_pairs <- bind_rows(
tibble(trait1 = example_traits, trait2 = trait1),
rename_all(as.data.frame(t(combn(example_traits, 2)), stringsAsFactors = FALSE), ~c("trait1", "trait2"))
)
# Phenotype data to use
pheno_dat_use <- left_join(pheno_dat, select(trial_metadata, trial, nursery, management), by = "trial")
pheno_to_model_example <- trait_pairs %>%
mutate(data = map2(trait1, trait2, ~{
pheno_dat_use %>%
filter(trait %in% c(.x, .y)) %>%
# Filter trials where both traits were observed
group_by(trial) %>%
filter(n_distinct(trait) == n_distinct(c(.x, .y))) %>%
spread(trait, value) %>%
group_by(nursery, management) %>%
nest()
})) %>%
unnest(data)
pheno_to_model_example
pheno_to_model_example$data[[1]]
pheno_to_model_example$data[[6]]
i = 1
df1 <- droplevels(pheno_to_model_example$data[[i]])
df1
df1$trial %>% n_distinct()
# Subset the A matrix
A_use <- A %>%
subset(row.names(.) %in% levels(df1$line_name), colnames(.) %in% levels(df1$line_name))
## Build a relationship matrix for GxE
# E matrix for environments
# E <- diag(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
E <- select(df1, line_name, environment, value) %>%
spread(environment, value) %>%
select(levels(df1$environment)) %>%
cor(., use = "pairwise.complete.obs")
df1
df1
str_subset(names(df1), "^[A-Z]")
# Trait or traits
tr <- str_subset(names(df1), "^[A-Z]")
## Build a relationship matrix for GxE
# E matrix for environments
E <- diag(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
dim(E)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
dim(A_use)
274 * 148
library(Matrix)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- Matrix::kronecker(A_use, E, make.dimnames = TRUE)
install.packages("bigmemory")
x <- big.matrix(5, 2, type="integer", init=0,
dimnames=list(NULL, c("alpha", "beta")))
library(bigmemory)
x <- big.matrix(5, 2, type="integer", init=0,
dimnames=list(NULL, c("alpha", "beta")))
x
dim(X)
dim(x)
x[1:2,]
## Try using bigmemory
A_use_big <- as.big.matrix(A_use)
A_use_big
E_big <- as.big.matrix(E)
AE_big <- kronecker(A_use_big, E_big, make.dimnames = TRUE)
E <- diag(nlevels(df1$environment))
E
E <- Diagonal(nlevels(df1$environment))
E
E <- Diagonal(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
E
E[1:5, 1:5]
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- Matrix::kronecker(A_use, E, make.dimnames = TRUE)
AE
AE
AE[1:5, 1:5]
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE, tolparinv = 1e-04)
df1
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE, tolparinv = 1e-04)
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
# rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE, tolparinv = 1e-04)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
object.size(AE)
format(object.size(AE), "Mb")
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- Matrix::kronecker(A_use, E, make.dimnames = TRUE)
format(object.size(AE), "Mb")
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE, tolparinv = 1e-04)
AE[1:5, 1:5]
AE <- as.matrix(AE)
format(object.size(AE), "Mb")
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE, tolparinv = 1e-04)
detach("package:Matrix")
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
dim(AE)
dim(E)
dim(A_use)
274 * 145
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- as.big.matrix(kronecker(A_use, E, make.dimnames = TRUE))
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- as.big.matrix(kronecker(A_use, E, make.dimnames = TRUE))
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
df1
pheno_to_model_example
## Barley Nursery Analysis
##
## Fit models to analyze the nursery data
##
## Author: Jeff Neyhart
## Last modified: 25 Feb. 2020
##
## This script will fit mixed-models to analyze data across the barley nursery set. One model will be
## fitted per trait/nursery/management combination.
##
## Mixed-model breakdown:
## - Environments are fixed
## - Genotypes and GxE are random with constant variance
## - Heterogenous error per environment
##
# Other packages
library(lmerTest)
library(broom)
library(sommer)
library(Matrix)
# Run on a local machine
proj_dir <- getwd()
source(file.path(proj_dir, "startup.R"))
# # Run the source script
# proj_dir <- "/panfs/roc/groups/6/smithkp/neyha001/Projects/BarleyNurseryAnalysis"
# source(file.path(proj_dir, "startup_MSI.R"))
## Convert the pedigree mat to A
A <- as.matrix(pedigree_Amat[levels(pheno_dat$line_name), levels(pheno_dat$line_name)])
## Nest phenotypic data by trait, nursery, and management
pheno_to_model <- pheno_dat %>%
left_join(., select(trial_metadata, trial, nursery, management)) %>%
group_by(trait, nursery, management) %>%
nest() %>%
mutate(out = list(NULL))
## Example output for multiple environments and multiple traits
example_traits <- c("GrainYield", "GrainProtein")
## Extract phenotypic data for these traits
## Find trials where at least one trait was observed; then find
## trials where both traits were observed
trait_pairs <- bind_rows(
tibble(trait1 = example_traits, trait2 = trait1),
rename_all(as.data.frame(t(combn(example_traits, 2)), stringsAsFactors = FALSE), ~c("trait1", "trait2"))
)
# Phenotype data to use
pheno_dat_use <- left_join(pheno_dat, select(trial_metadata, trial, nursery, management), by = "trial")
pheno_to_model_example <- trait_pairs %>%
mutate(data = map2(trait1, trait2, ~{
pheno_dat_use %>%
filter(trait %in% c(.x, .y)) %>%
# Filter trials where both traits were observed
group_by(trial) %>%
filter(n_distinct(trait) == n_distinct(c(.x, .y))) %>%
spread(trait, value) %>%
group_by(nursery, management) %>%
nest()
})) %>%
unnest(data)
pheno_to_model_example
i = 7
df1 <- droplevels(pheno_to_model_example$data[[i]])
# Trait or traits
tr <- str_subset(names(df1), "^[A-Z]")
# Subset the A matrix
A_use <- A %>%
subset(row.names(.) %in% levels(df1$line_name), colnames(.) %in% levels(df1$line_name))
## Build a relationship matrix for GxE
# E matrix for environments
E <- diag(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
E <- Diagonal(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- kronecker(A_use, E, make.dimnames = TRUE)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
AE[1:5, 1:5]
dim(AW)
dim(AE)
dim(E)
E[1:5, 1:5]
dim(A)
dim(A_use)
287 * 33
dim(AE)
interaction(row.names(A_use))
interaction(row.names(A_use), row.names(E))
interaction(list(row.names(A_use), row.names(E)))
paste0(rep(A_use, each = ncol(E)))
paste0(rep(row.names(A_use), each = ncol(E)), row.names(E), sep = ":")
paste(rep(row.names(A_use), each = ncol(E)), row.names(E), sep = ":")
dimnames(AE) <- replicate(2, paste(rep(row.names(A_use), each = ncol(E)), row.names(E), sep = ":"), simplify = F)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- as.matrix(kronecker(A_use, E, make.dimnames = TRUE))
dimnames(AE) <- replicate(2, paste(rep(row.names(A_use), each = ncol(E)), row.names(E), sep = ":"), simplify = F)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
fit$sigma
tr
paste0("cbind(", paste0(tr, collapse = ", "), ")")
reformulate(paste0("cbind(", paste0(tr, collapse = ", "), ")"))
reformulate(response = paste0("cbind(", paste0(tr, collapse = ", "), ")"))
reformulate(response = paste0("cbind(", paste0(tr, collapse = ", "), ")"), termlabels = "1 + environment")
fixed_form <- reformulate(response = paste0("cbind(", paste0(tr, collapse = ", "), ")"),
termlabels = "1 + environment")
# Fit a model with genetic correlations
fit1 <- mmer(fixed = fixed_form,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
# Run on a local machine
proj_dir <- getwd()
source(file.path(proj_dir, "startup.R"))
# Other packages
library(lmerTest)
library(broom)
library(Matrix)
library(modelr)
library(nlme)
## Convert the pedigree mat to A
A <- as.matrix(pedigree_Amat[levels(pheno_dat$line_name), levels(pheno_dat$line_name)])
## Nest phenotypic data by trait, nursery, and management
pheno_to_model <- pheno_dat %>%
left_join(., select(trial_metadata, trial, nursery, management)) %>%
group_by(trait, nursery, management) %>%
nest() %>%
mutate(out = list(NULL))
## Example output for multiple environments and multiple traits
example_traits <- c("GrainYield", "GrainProtein")
# For each of 5 trait, sample 5 locations with at least 5 years of data
nLocations <- 10
nYears <- 5
## Find traits with the required number of locations and years
pheno_dat_example <- pheno_dat %>%
filter(year %in% 2000:2010) %>%
group_by(location) %>%
filter(n_distinct(year) >= nYears) %>%
group_by(trait) %>%
filter(n_distinct(location) >= nLocations) %>%
ungroup()
set.seed(1254)
sample_traits <- c(example_traits, sample(x = setdiff(unique(pheno_dat_example$trait), example_traits),
size = 5 - length(example_traits)))
## Nest phenotypic data by trait
set.seed(1254)
pheno_to_model_example <- pheno_dat_example %>%
filter(trait %in% sample_traits) %>%
split(.$trait) %>%
map_df(~filter(., location %in% sample(unique(location), nLocations))) %>%
left_join(., select(trial_metadata, trial, nursery, management)) %>%
group_by(trait) %>%
nest() %>%
mutate(out = list(NULL))
i = 1
pheno_to_model_example
df1 <- droplevels(pheno_to_model_example$data[[i]])
# Trait or traits
tr <- str_subset(names(df1), "^[A-Z]")
# Subset the A matrix
A_use <- A %>%
subset(row.names(.) %in% levels(df1$line_name), colnames(.) %in% levels(df1$line_name))
## Build a relationship matrix for GxE
# E matrix for environments
# E <- diag(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
E <- Diagonal(nlevels(df1$environment)); dimnames(E) <- replicate(2, levels(df1$environment), simplify = F)
# E <- select(df1, line_name, environment, value) %>%
#   spread(environment, value) %>%
#   select(levels(df1$environment)) %>%
#   cor(., use = "pairwise.complete.obs")
AE <- as.matrix(kronecker(A_use, E, make.dimnames = TRUE))
dimnames(AE) <- replicate(2, paste(rep(row.names(A_use), each = ncol(E)), row.names(E), sep = ":"), simplify = F)
# Model A1het - y = 1 + e + G - heterogenous error
fit_a1het <- lme(fixed = value ~ 1 + environment,
random = list(line_name = pdSymm(form = ~ factor(environment))),
data = df1)
# Model A1het - y = 1 + e + G - heterogenous error
fit_a1het <- lme(fixed = value ~ 1 + environment,
random = list(line_name = pdDiag(form = ~ factor(environment))),
data = df1)
## The first set of models will not use relationship matrices
# Model A1 - y = 1 + e + G - homogeneous error
fit_a1 <- mmer(fixed = value ~ 1 + environment, random = ~ line_name, rcov = ~ units,
data = df1)
# Model A1het - y = 1 + e + G - heterogenous error
fit_a1het <- mmer(fixed = value ~ 1 + environment, random = ~ line_name, rcov = ~ vs(ds(environment), units),
data = df1, date.warning = FALSE)
fit_a1het$sigma
fit_a1
herit.mmer(fit_a1)
herit.mmer
fit_a1$U$line_name$value %>% length
fit_a1$data$line_name
n_distinct(fit_a1$data$line_name)
## Calculate heritability based on sommer mixed model output
herit.mmer <- function(x, gen.var = "u:line_name", method = c("Cullis")) {
# Match method
method <- match.arg(method)
# Extract common components
varG <- as.numeric(x$sigma[[gen.var]]) # Genetic variance component
n_g <- n_distinct(x$data$line_name) # Number of genotypes
C22 <- x$PevU[[gen.var]]$value
# Direct by method
if (method == "Cullis") {
trC22 <- sum(diag(C22))
# Mean variance of a difference between BLUPs
vdBLUP <- 2 / n_g * (trC22 - (sum(C22) - trC22)/(n_g - 1))
H2 <- 1 - (vdBLUP / 2 / varG)
} else {
stop("!")
}
# Return heritability
return(H2)
}
herit.mmer(fit_a1)
herit.mmer
fit_a1$sigma$line_name
herit.mmer(fit_a1, gen.var = "line_name")
fit_a1$monitor[1,]
last(fit_a1$monitor[1,])
# Get variance components and model diagonistics
fit_a1_diag <- tibble(H2 = herit.mmer(fit_a1, gen.var = "line_name"),
AIC = fit_a1$AIC, BIC = fit_a1$BIC, logLik = last(fit_a1$monitor[1,]))
rm(fit_a1)
fit_a1_diag
# Get variance components and model diagonistics
fit_a1het_diag <- tibble(H2 = herit.mmer(fit_a1het, gen.var = "line_name"),
AIC = fit_a1het$AIC, BIC = fit_a1het$BIC, logLik = last(fit_a1het$monitor[1,]))
fit_a1het_diag
fit_a1_diag
rm(fit_a1het)
# Model A2 - y = 1 + e + G + GE - homogeneous error
fit_a2 <- mmer(fixed = value ~ 1 + environment,
random = ~ line_name + line_name:environment,
rcov = ~ units,
data = df1, date.warning = FALSE)
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
df1
# Fit the model
fit <- mmer(fixed = GrainYield ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
# Fit the model
fit <- mmer(fixed = value ~ 1 + environment,
random = ~vs(line_name, Gu = A_use) + vs(line_name:environment, Gu = AE),
rcov = ~vs(ds(environment), units),
data = df1, date.warning = FALSE)
