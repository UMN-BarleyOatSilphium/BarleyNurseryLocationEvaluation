propvar_eigen = eigenvalue / sum(eigenvalue))),
varprop = map2(varprop, anova, left_join, by = c("PC" = "term")),
varprop = map(varprop, ~mutate(.x, propvar_SS = SS / sum(SS, na.rm = TRUE), PC_num = parse_number(PC)) %>%
select(-Df, -MS, -testStatistic)))
bilinear_sig_PCs <- bilinear_scores %>%
unnest(varprop) %>%
#
mutate(propvar = propvar_SS) %>%
#
arrange(trait, PC_num) %>%
split(.$trait) %>%
## Calculate the difference between steps of adding PCs. Find the first step when the difference is
## below the tolerance threshold
map_df(~mutate(., propvar_diff = c(abs(diff(propvar)), 0),
stop = which.min(propvar_diff >= tol),
nPC = stop - 1))
## Summary df of number of sig PCs
bilinear_sig_PCs_summ <- bilinear_sig_PCs %>%
group_by(trait) %>%
filter(PC_num %in% seq(1, unique(nPC))) %>%
summarize(total_propvar = sum(propvar), nPC = unique(nPC))
bilinear_sig_PCs_summ
## Fit a model for that number of PCS
bilinear_fitN_fit <- bilinear_fit %>%
left_join(., bilinear_sig_PCs_summ, by = "trait") %>%
group_by(trait) %>%
do({
row <- .
nPC <- row$nPC
# Get the fitted ammi model
fitted <- row$fit[[1]]
# Get the environmental and genotypic effects
g_effects <- fitted$Geffect %>%
tibble(line_name = names(.), effect = .)
e_effects <- fitted$Eeffect %>%
tibble(environment = names(.), effect = .)
# Get the environmental and genotypic scores
g_scores <- fitted$scores$Gscores
e_scores <- fitted$scores$Escores
## Sum the first nPC scores
g_scores_sum <- rowSums(g_scores[,seq_len(nPC), drop = FALSE])
e_scores_sum <- rowSums(e_scores[,seq_len(nPC), drop = FALSE])
## Combine into DF
g_effects_scores <- cbind(g_effects, score = g_scores_sum, g_scores)
e_effects_scores <- cbind(e_effects, score = e_scores_sum, e_scores)
## Predict y
# First sum effects
ge_effect_summ <- outer(
X = g_effects_scores[,"effect"],
Y = e_effects_scores[,"effect"],
FUN = "+")
## Calculate phi, the fitted GxE effect vector using the principal components
phi <- outer(X = g_scores_sum, Y = e_scores_sum)
# Add the effects to phi, add intercept
y_hat_mat <- c(fitted$mu) + ge_effect_summ + phi
# Convert to df
y_hat_df <- as.data.frame(y_hat_mat) %>%
rownames_to_column("line_name") %>%
gather(environment, y_hat, -line_name)
## Return tibble
tibble(mu = fitted$mu, y_hat = list(y_hat_df), g_scores = list(g_effects_scores),
e_scores = list(e_effects_scores), phi = list(phi))
}) %>% ungroup()
## Determine mega-environments by looking at the winning genotypes per environment
# Set the direction of "best" traits
trait_dir_df <- tribble(
~trait, ~dir,
"GrainYield", "high",
"GrainProtein", "low"
)
bilinear_ranks <- bilinear_fitN_fit %>%
unnest(y_hat) %>%
left_join(., trait_dir_df) %>%
split(.$trait) %>%
map_df(~{
# Rank genotypes by environment
if (unique(.x$dir) == "high") {
group_by(.x, trait, environment) %>%
mutate(rank = desc(row_number(y_hat)),
rank = rank - min(rank) + 1)
} else {
group_by(.x, trait, environment) %>%
mutate(rank = row_number(y_hat))
}
}) %>% ungroup()
## Assign mega-environments
bilinear_me <- bilinear_ranks %>%
split(.$trait) %>%
map_df(~group_by(.x, environment) %>%
filter(rank == min(rank)) %>%
ungroup() %>%
mutate(me = as.numeric(as.factor(line_name))))
bilinear_me
BBplot(fit)
# Fit the model
fit <- bilinear(x = df1, G = "line_name", E = "environment", y = "ppv", test = "bootstrap", B = 1,
model = "AMMI")
BBplot(fit)
BBplot(fit, decorateGGE = T)
AMMIplot(fit)
bilinear_me
bilinear_me %>% distinct(trait, line_name, me)
pheno_blup
pheno_blup %>% filter(line_name == "M133")
pheno_blup %>% filter(line_name == "M133", trait == "GrainYield")
pheno_blup %>% filter(line_name == "M133", trait == "GrainYield") %>% filter(!is.na(pheno))
bilinear_me
## Assign mega-environments
bilinear_me <- bilinear_ranks %>%
split(.$trait) %>%
map_df(~group_by(.x, environment) %>%
filter(rank == min(rank)) %>%
ungroup() %>%
mutate(me = as.numeric(as.factor(line_name)))) %>%
select(-mu, -y_hat, -dir, -rank)
bilinear_me
## Save the model output
save("bilinear_fit", "bilinear_fitN_fit", "bilinear_me", file = file.path(result_dir, "bilinear_model_fit.RData"))
bilinear_me
pheno_blup_tomodel
## Calculate the correlation between environments at a location
location_gen_cor <- pheno_blup_tomodel %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do(loc_cor_out = {
df <- .
select(df, line_name, environment, ppv) %>%
spread(environment, ppv) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor() %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
}) %>%
ungroup() %>%
mutate(mean_corr = map_dbl(loc_cor_out, ~mean(.$corr)))
pheno_blup_tomodel
pheno_blup_tomodel
pheno_blup
pheno_blup %>%
select(trait, trial, environment, line_name, ppv)
pheno_blup %>%
select(trait, trial, environment, line_name, ppv) %>%
complete(trial, line_name, trait, fill = list(ppv = NA))
pheno_blup
pheno_blup_tomodel
trial_metadata
select(trial_metadata, trial, location)
pheno_blup_tomodel %>%
left_join(., select(trial_metadata, trial, location))
## Calculate the correlation between environments at a location
location_gen_cor <- pheno_blup_tomodel %>%
left_join(., select(trial_metadata, trial, location)) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do(loc_cor_out = {
df <- .
select(df, line_name, environment, ppv) %>%
spread(environment, ppv) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor() %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
}) %>%
ungroup() %>%
mutate(mean_corr = map_dbl(loc_cor_out, ~mean(.$corr)))
location_gen_cor
pheno_dat
pheno_blup_tomodel
inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name))
## Calculate correlations based on phenotypic data
location_gen_cor_pheno <- inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do(loc_cor_out = {
df <- .
select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
}) %>%
ungroup() %>%
mutate(mean_corr = map_dbl(loc_cor_out, ~mean(.$corr)))
location_gen_cor_pheno
## Calculate correlations based on phenotypic data
location_gen_cor_pheno <- inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do(loc_cor_out = {
df <- .
select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
}) %>%
ungroup()
location_gen_cor_pheno
## Calculate correlations based on phenotypic data
location_gen_cor_pheno <- inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do({
df <- .
select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
}) %>%
ungroup()
location_gen_cor_pheno
warnings()
location_gen_cor_pheno
inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean)
pheno_blup_tomodel
distinct(pheno_blup_tomodel, trait, trial, line_name)
location_gen_cor_pheno
trial_metadata
select(trial_metadata, environment, year)
## Filter environmental correlations for those that are adjacent in years
.
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year), by = c("environment1" = "environment"))
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment"))
## Filter environmental correlations for those that are adjacent in years
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
mutate(diff = year1 - year2)
## Filter environmental correlations for those that are adjacent in years
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
mutate(abs(year1 - year2) == 1)
## Filter environmental correlations for those that are adjacent in years
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1)
inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1)
inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>% ungroup() %>% filter_at(vars(trait, location), all_vars(. == first(.)))
inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>% ungroup() %>% filter_at(vars(trait, location), all_vars(. == first(.))) -> df
df
select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name")
select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
pairwise_cor <- select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr"))
pairwise_cor
pairwise_cor
df
pairwise_cor
df
pairwise_cor
pairwise_cor$environment1[1] -> .x
pairwise_cor$environment2[1] -> .y
.x
.y
df
filter(df, environment %in% c(.x, .y))
pairwise_cor
pairwise_cor <- select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr")) %>%
mutate_if(is.factor, as.character)
pairwise_cor
df
pairwise_cor
pairwise_cor$environment1[1] -> .x
pairwise_cor$environment2[1] -> .y
.x
.y
df
filter(df, environment %in% c(.x, .y))
filter(df, environment %in% c(.x, .y)) %>% group_by(line_name)
filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>% filter(n_distinct(environment) == 2)
filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>% filter(n_distinct(environment) == 2) %>% pull(line_name)
filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>% filter(n_distinct(environment) == 2) %>% pull(line_name) %>% n_distinct()
# Calculate overlap in genotypes between environments
pairwise_cor %>%
mutate(overlap = map2(environment1, environment2, ~filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>%
filter(n_distinct(environment) == 2) %>% pull(line_name) %>%
n_distinct() ))
# Calculate overlap in genotypes between environments
pairwise_cor %>%
mutate(overlap = map2_dbl(environment1, environment2, ~filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>%
filter(n_distinct(environment) == 2) %>% pull(line_name) %>%
n_distinct() ))
## Calculate correlations based on phenotypic data
location_gen_cor_pheno <- inner_join(pheno_dat, distinct(pheno_blup_tomodel, trait, trial, line_name)) %>%
group_by(trait, line_name, location, environment) %>%
summarize_at(vars(value), mean) %>%
group_by(trait, location) %>%
filter(n_distinct(environment) > 1) %>%
do({
df <- .
pairwise_cor <- select(df, line_name, environment, value) %>%
spread(environment, value) %>%
as.data.frame() %>%
column_to_rownames("line_name") %>%
cor(use = "pairwise.complete.obs") %>%
as.dist() %>%
tidy() %>%
rename_all(~c("environment1", "environment2", "corr")) %>%
mutate_if(is.factor, as.character)
# Calculate overlap in genotypes between environments
pairwise_cor %>%
mutate(overlap = map2_dbl(environment1, environment2, ~filter(df, environment %in% c(.x, .y)) %>% group_by(line_name) %>%
filter(n_distinct(environment) == 2) %>% pull(line_name) %>%
n_distinct() ))
}) %>%
ungroup()
location_gen_cor_pheno
## Filter environmental correlations for those that are adjacent in years
location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1)
## Filter environmental correlations for those that are adjacent in years
location_adj_year_cor <- location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1)
location_adj_year_cor
## Summarize
location_adj_year_cor_summ <- location_adj_year_cor %>%
group_by(trait, location) %>%
summarize(mean_corr = mean(corr))
location_adj_year_cor_summ
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_boxplot() +
facet_grid(~ trait)
location_adj_year_cor
location_adj_year_cor %>%
group_by(trait, location)
## Filter environmental correlations for those that are adjacent in years
location_adj_year_cor <- location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1) %>%
group_by(trait, environment1, environment2)
location_adj_year_cor
## Filter environmental correlations for those that are adjacent in years
location_adj_year_cor <- location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1) %>%
group_by(trait, location) %>%
mutate(nCorr = n())
location_adj_year_cor
## Filter environmental correlations for those that are adjacent in years
location_adj_year_cor <- location_gen_cor_pheno %>%
left_join(., select(trial_metadata, environment, year1 = year), by = c("environment1" = "environment")) %>%
left_join(., select(trial_metadata, environment, year2 = year), by = c("environment2" = "environment")) %>%
filter(abs(year1 - year2) == 1) %>%
group_by(trait, location) %>%
mutate(nCorr = n()) %>%
ungroup()
location_adj_year_cor
## Summarize
location_adj_year_cor_summ <- location_adj_year_cor %>%
group_by(trait, location) %>%
summarize_at(vars(corr, nCorr), mean)
location_adj_year_cor_summ
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter() +
geom_boxplot() +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter() +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.5) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(aes(color = year), width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait) +
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(aes(color = year), width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
location_adj_year_cor
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(aes(color = year1), width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait) +
theme_presentation2(10)
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5) +
facet_grid(~ trait) +
theme_light()
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5, grey = "grey85") +
facet_grid(~ trait) +
theme_light()
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5, fill = "grey85") +
facet_grid(~ trait) +
theme_light()
# Plot
location_adj_year_cor %>%
ggplot(aes(x = location, y = corr)) +
geom_jitter(width = 0.25) +
geom_boxplot(alpha = 0.5, fill = "grey85", width = 0.5) +
facet_grid(~ trait) +
theme_light()
