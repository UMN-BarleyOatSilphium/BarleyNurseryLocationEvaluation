## Data exploration
## 
## Code for initial data exploration of the barley nursery dataset
## 

# Set directories and load packages
library(sommer)
# Load the source script
source("source.R")




##############
# Trial data makeup
##############

# Calculate the number of data.points per trait
# Also calculate the number of observed lines and trials
(trait_summ <- pheno_dat %>%
  group_by(trait) %>%
  summarize(nObs = n(), nLine = n_distinct(line_name), nEnv = n_distinct(trial),
            nYear = n_distinct(year), minYear = min(year1), maxYear = max(year1)) %>%
  arrange(desc(nObs)))

write_csv(x = trait_summ, path = file.path(fig_dir, "trait_observations.csv"))


## Visualize balance of lines over trials
ge_tab <- pheno_dat %>% 
  left_join(., select(trial_metadata, trial, nursery)) %>%
  distinct(line_name, trial, nursery) %>%
  xtabs(~ trial + line_name + nursery, data = ., drop.unused.levels = TRUE)

## Years by genotype-location example
gly_tab <- pheno_dat %>% 
  left_join(., select(trial_metadata, trial, nursery)) %>%
  distinct(line_name, location, year, nursery)

freq_df_plot <- gly_tab %>%
  group_by(line_name, location, nursery) %>%
  summarize(obs = n_distinct(year)) %>%
  ungroup() %>%
  # Split by nursery
  split(.$nursery) %>%
  map_df(~{
    droplevels(.x) %>%
      # Order line name and location factors by number of observations
      mutate_at(vars(line_name, location), ~fct_reorder(., obs, .fun = sum, .desc = TRUE)) %>%
      arrange(location, line_name)
  }) %>%
  # Convert line_name/location to factor based on first appearance
  mutate_at(vars(line_name, location), fct_inorder) %>%
  # Convert line_name and location to numeric
  mutate_at(vars(line_name, location), list(num = ~as.factor(as.numeric(.))))

## Plot tiles of years of genotype-location observations
freq_df_plot %>%
  ggplot(aes(x = location_num, y = line_name_num, fill = obs)) +
  geom_tile() +
  facet_grid(~ nursery, drop = TRUE, scales = "free_x", space = "free_x") +
  scale_y_discrete(breaks = function(x) as.character(pretty(as.numeric(x), n = 20)), name = "Genotype") +
  scale_x_discrete(breaks = function(x) as.character(pretty(as.numeric(x), n = 20)), name = "Location") +
  theme_light()



# Save 






## 

# Determine the proportion of possible genotype-environment combinations that are observed.
# Then do this by nursery
mean(as.numeric(freq_df$obs) - 1)

# about 4.2% 


## Summarize nObs per line, per trait
(pheno_obs_summ <- pheno_dat %>% 
  group_by(trait, line_name) %>%
  summarize(nObs = n()) %>% 
  arrange(desc(nObs)) %>% 
  as.data.frame())


## Look at singly observed lines - these are suspicious
single_obs_lines <- filter(pheno_obs_summ, nObs == 1) %>%
  group_by(line_name) %>%
  filter(all(nObs == 1)) %>%
  ungroup() %>%
  distinct(line_name) %>%
  as.data.frame() %>%
  mutate(line_name = as.character(line_name)) %>%
  arrange(line_name)
write_csv(x = single_obs_lines, path = file.path(fig_dir, "single_observed_lines.csv"))
















### Phenotype - Pedigree data comparion

# How many phenotyped lines are in the pedigree A mat?
mean(levels(pheno_dat$line_name) %in% row.names(pedigree_Amat))

# All phenotyped lines are in the A mat - good


# Subset the A mat for only phenotyped lines
A <- as.matrix(pedigree_Amat[levels(pheno_dat$line_name), levels(pheno_dat$line_name)])









## Measure correlation between environments for grain yield
pheno_use <- filter(pheno_dat, trait == "GrainYield") %>%
  droplevels()

## Calculate means
pheno_means <- pheno_use %>%
  group_by(trait, line_name, location, environment) %>%
  summarize(value = mean(value)) %>%
  ungroup()

## Measure the correlation between environments
environmental_cor <- pheno_means %>%
  as.data.frame() %>%
  spread(environment, value) %>%
  column_to_rownames("line_name") %>%
  cor(use = "pairwise.complete.obs")

## Measure correlation between environments per location
environment_location_mats <- pheno_means %>%
  split(.$location) %>%
  map(~as.matrix(xtabs(value ~ line_name + environment, data = .x, drop.unused.levels = TRUE)) %>% 
        ifelse(. == 0, NA, .) )
  
environment_location_cor <- environment_location_mats %>%
  map(~cor(., use = "pairwise.complete.obs"))

## Convert to df
environment_location_cor_df <- environment_location_cor %>%
  map(~tidy(as.dist(.)) %>% rename_all(~c("environment1", "environment2", "corr"))) %>%
  subset(., map_lgl(., ~nrow(.) > 0)) %>%
  imap_dfr(~mutate(.x, location = .y))

# Measure average inter-environment correlation per location
environment_location_cor_summ <- environment_location_cor_df %>%
  filter(!is.na(corr)) %>%
  group_by(location) %>%
  summarize(corr = mean(corr), nPairs = n()) %>%
  arrange(desc(corr)) %>%
  mutate(location = factor(location, levels = .$location))

# Plot
qplot(x = location, y = corr, data = environment_location_cor_summ, geom = "col") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot distribution
environment_location_cor_df %>%
  mutate(location = factor(location, levels = levels(environment_location_cor_summ$location))) %>%
  qplot(x = location, y = corr, geom = "boxplot", data = .)




## Calculate heritability within environments 
## Compare a single-environment model with multi-environment model

# Grain yield as trait example
pheno_use <- filter(pheno_dat, trait == "GrainYield") %>%
  droplevels() %>%
  left_join(., select(trial_metadata, trial, nursery, management))

## 

# # Basic linear model
# fit <- lm(value ~ 1 + line_name + environment, data = pheno_use)
# # Add nursery
# fit1 <- lm(value ~ 1 + line_name + nursery + environment:nursery, data = pheno_use)
# # Model management and nursery
# fit2 <- lm(value ~ 1 + line_name + nursery + management:nursery + location:nursery, data = pheno_use)
# anova(fit2)
# # Test management differences within WRN nursery
# fit3 <- lm(value ~ 1 + line_name + management + location + location:management, 
#            data = pheno_use, subset = nursery == "wrn")
# anova(fit3)



## Try fitting a mixed model per nursery and management
pheno_use1 <- pheno_use %>%
  filter(nursery == "mvn", year1 < 2005) %>%
  droplevels()
A_use <- A %>% subset(row.names(.) %in% levels(pheno_use1$line_name), colnames(.) %in% levels(pheno_use1$line_name))

fit_per_nursery <- mmer(fixed = value ~ 1 + environment,
                        # random = ~vs(ds(environment), line_name, Gu = A_use),
                        random = ~vs(line_name, Gu = A_use),
                        rcov = ~vs(ds(environment), units),
                        data = pheno_use1)

## Heritability
h2_per_nursery <- herit.mmer(x = fit_per_nursery)

# Environment error
environment_error <- fit_per_nursery$sigma[-1] %>% 
  map_dbl(~.) %>% 
  tibble(environment = names(.), varE = .) %>% 
  mutate(environment = str_remove_all(environment, ":units"))

# Plot per locations
pheno_use1 %>% 
  distinct(environment, location) %>% 
  left_join(., environment_error) %>% 
  mutate(location = fct_reorder(.f = location, .x = varE, .fun = mean, .desc = TRUE)) %>%
  qplot(x = location, y = varE, geom = "boxplot", data = .)







# Sample 5 locations
set.seed(846)
locations_sample <- subset(pheno_use, str_detect(trial, "WRN"), location, drop = T) %>%
  droplevels() %>% levels() %>% sample(5)

pheno_use_sample <- pheno_use %>%
  filter(location %in% locations_sample) %>%
  droplevels()

# Fit a model per location; return heritability
H2_per_loc <- pheno_use_sample %>%
  group_by(location) %>%
  do({
    df <- .
    # Subset and droplevels
    df1 <- droplevels(df)
    A_use <- A[levels(df1$line_name), levels(df1$line_name)]
    
    fit <- mmer(fixed = value ~ 1 + environment, random = ~vs(line_name, Gu = A_use), 
                data = df1, rcov = ~vs(ds(environment), units), date.warning = FALSE)
    
    ## Calculate heritability via Cullis
    # Extact model estimates
    varG <- as.numeric(fit$sigma$`u:line_name`) # Genetic variance component
    n_g <- ncol(A_use) # Number of genotypes
    C22 <- fit$PevU$`u:line_name`$value
    trC22 <- sum(diag(C22))
    # Mean variance of a difference between BLUPs
    vdBLUP <- 2 / n_g * (trC22 - (sum(C22) - trC22)/(n_g - 1))
    
    H2Cullis <- 1 - (vdBLUP / 2 / varG)
    
    tibble(H2 = H2Cullis, n_g = n_g, n_e = nlevels(df1$environment))

  })


# Fit a model across all location; return heritability
H2_across_loc <- pheno_use_sample %>%
  group_by(trait) %>%
  do({
    df <- .
    # Subset and droplevels
    df1 <- droplevels(df)
    A_use <- A[levels(df1$line_name), levels(df1$line_name)]
    
    fit <- mmer(fixed = value ~ 1 + environment, random = ~vs(ds(environment), line_name, Gu = A_use), 
                data = df1, rcov = ~vs(ds(environment), units), date.warning = FALSE)
    
    # Extract varG and PEV per env
    fit_varcomp <- transpose(list(sigma = subset(fit$sigma, str_detect(names(fit$sigma), "line_name")), PEV = fit$PevU))
    
    ## Map over environments to calculate heritability
    env_H2 <- map_dbl(.x = fit_varcomp, .f = ~{
      
      ## Calculate heritability via Cullis
      # Extact model estimates
      varG <- as.numeric(.x$sigma) # Genetic variance component
      C22 <- .x$PEV$value # Variance of difference in BLUPs
      n_g <- ncol(C22) # Number of genotypes
      trC22 <- sum(diag(C22))
      # Mean variance of a difference between BLUPs
      vdBLUP <- 2 / n_g * (trC22 - (sum(C22) - trC22)/(n_g - 1))
      
      # Return heritability
      1 - (vdBLUP / 2 / varG)
      
    })
    
    # Output table
    env_H2 %>%
      tibble(environment = names(.), H2Cullis = .) %>%
      mutate(environment = str_remove_all(environment, ":line_name"))
  })






##





## Fit a basic linear model to explore a less phenotyped trait
set.seed(401)
pheno_subset <- pheno_dat %>%
  filter(trait == "GrainProtein") %>%
  droplevels()
pheno_subset <- pheno_subset %>%
  filter(environment %in% sample(levels(pheno_subset$environment), 50)) %>%
  droplevels()


## Measure the correlation between environments
environmental_cor <- pheno_subset %>%
  filter(str_detect(trial, "Rainfed")) %>%
  group_by(line_name, environment) %>%
  summarize(value = mean(value)) %>%
  as.data.frame() %>%
  spread(environment, value) %>%
  column_to_rownames("line_name")










# Fit models
fit <- lm(value ~ line_name + environment, data = pheno_subset)

# Model genotypes as random using the A mat
# also treat environments as random
fit2 <- mmer(fixed = value ~ 1, random = ~ vs(line_name, Gu = A) + environment, 
             data = pheno_subset, date.warning = FALSE)

# Try a model with GxE
# Create an environmental relationship matrix
E <- diag(nlevels(pheno_subset$environment)); dimnames(E) <- list(levels(pheno_subset$environment), levels(pheno_subset$environment))
AE <- kronecker(A, E, make.dimnames = TRUE)
dimnames(AE) <- replicate(2, paste(rep(row.names(A), each = nrow(E)), row.names(E), sep = ":"), simplify = F)
AE <- as.matrix(AE)

fit3 <- mmer(fixed = value ~ 1 + environment, random = ~ vs(line_name:environment, Gu = AE), 
             data = pheno_subset, date.warning = FALSE)


# Get BLUPs
fit3_blups <- fit3$U$`u:line_name:environment`$value %>%
  tibble(term = names(.), blup = .) %>%
  separate(term, c("line_name", "environment"), sep = ":")

# Accuracy?
pheno_subset %>%
  left_join(., fit3_blups) %>%
  qplot(x = value, y = blup, data = ., color = environment)




















